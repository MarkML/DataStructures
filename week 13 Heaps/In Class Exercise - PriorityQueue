/*
In-Class example of Max-Heap,  Priority Queue
Suppose you are managing a hospital emergency room. Patients arrive with varying degrees
of severity, and you need to prioritize their treatment based on severity levels. 
You decide to use a priority queue to manage the patient queue, where patients with
higher severity levels are treated first.
*/

#include <iostream>
#include <vector>

using namespace std;

class PriorityQueue {
private:
    vector<int> heapArray; // Vector to store elements of the priority queue

    // Helper function to percolate up an element to its correct position in the max-heap
    void MaxHeapPercolateUp(int nodeIndex) {
        while (nodeIndex > 0) { // Loop until the root is reached
            int parentIndex = (nodeIndex - 1) / 2; // Calculate the index of the parent node
            if (heapArray[nodeIndex] <= heapArray[parentIndex]) // If current node <= parent node, heap property is satisfied
                return; // Exit loop
            else {
                swap(heapArray[nodeIndex], heapArray[parentIndex]); // Otherwise, swap current node with parent node
                nodeIndex = parentIndex; // Move up to the parent node and continue percolating up
            }
        }
    }

    // Helper function to percolate down an element to its correct position in the max-heap
    void MaxHeapPercolateDown(int nodeIndex, int arraySize) {
        int childIndex = 2 * nodeIndex + 1; // Calculate the index of the left child
        int value = heapArray[nodeIndex]; // Store the value of the current node

        while (childIndex < arraySize) { // Loop while the current node has at least one child
            // Find the maximum value among the current node and its children
            int maxValue = value; // Initialize the maximum value with the value of the current node
            int maxIndex = -1; // Initialize the index of the maximum value

            // Iterate through the children nodes (maximum 2 children)
            for (int i = 0; i < 2 && i + childIndex < arraySize; i++) {
                if (heapArray[i + childIndex] > maxValue) { // If a child node has a greater value than the current maximum value
                    maxValue = heapArray[i + childIndex]; // Update the maximum value
                    maxIndex = i + childIndex; // Update the index of the maximum value
                }
            }

            if (maxValue == value) // If the maximum value is the value of the current node, heap property is satisfied
                return; // Exit loop
            else {
                swap(heapArray[nodeIndex], heapArray[maxIndex]); // Otherwise, swap the current node with the maximum value node
                nodeIndex = maxIndex; // Move down to the maximum value node and continue percolating down
                childIndex = 2 * nodeIndex + 1; // Update the index of the left child
            }
        }
    }

public:
    // Function to insert a new element into the priority queue
    void Enqueue(int value) {
        heapArray.push_back(value); // Add the new element to the end of the heap
        MaxHeapPercolateUp(heapArray.size() - 1); // Percolate up the new element to its correct position
    }

    // Function to remove and return the element with the highest priority (root of the max-heap)
    int Dequeue() {
        if (heapArray.empty()) { // If the priority queue is empty
            cout << "Priority queue is empty!" << endl; // Output error message
            return -1; // Return -1 indicating failure
        }

        int maxVal = heapArray[0]; // Store the value of the root node (element with highest priority)
        swap(heapArray[0], heapArray.back()); // Swap the root node with the last node
        heapArray.pop_back(); // Remove the last node (previously the root)
        MaxHeapPercolateDown(0, heapArray.size()); // Percolate down the new root to its correct position
        return maxVal; // Return the value of the removed element (highest priority)
    }

    // Function to return the value of the element with the highest priority (root of the max-heap) without removing it
    int Peek() {
        if (heapArray.empty()) { // If the priority queue is empty
            cout << "Priority queue is empty!" << endl; // Output error message
            return -1; // Return -1 indicating failure
        }

        return heapArray[0]; // Return the value of the root node (element with highest priority)
    }

    // Function to check if the priority queue is empty
    bool IsEmpty() {
        return heapArray.empty(); // Return true if the priority queue is empty, false otherwise
    }

    // Function to return the number of elements (nodes) in the priority queue
    int GetLength() {
        return heapArray.size(); // Return the size of the heap array
    }
};

int main() {
    PriorityQueue priorityQueue; // Create an instance of the PriorityQueue class

    //  Patients enter the ER in this order - Enqueue patients with their priorities,
    priorityQueue.Enqueue(10); // John: Severe injury (Priority: 10)
    priorityQueue.Enqueue(5);  // Alice: Moderate injury (Priority: 5)
    priorityQueue.Enqueue(15); // Bob: Critical condition (Priority: 15)
    priorityQueue.Enqueue(3);  // Sarah: Minor injury (Priority: 3)

    // Dequeue and treat patients in order of priority
    cout << "Treating patients in priority order:" << endl;
    while (!priorityQueue.IsEmpty()) { // Loop until the priority queue is empty
        cout << "Treating patient with priority: " << priorityQueue.Peek() << endl; // Peek at the next patient's priority
        priorityQueue.Dequeue(); // Treat the patient by removing them from the priority queue
    }

    // Check if the priority queue is empty after treating all patients
    if (priorityQueue.IsEmpty()) {
        cout << "All patients treated. Priority queue is empty." << endl;
    }

    // Get the total number of patients treated
    cout << "Total number of patients treated: " << priorityQueue.GetLength() << endl;

    return 0;
}

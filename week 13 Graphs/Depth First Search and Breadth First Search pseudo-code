Depth First Seach Algorithm â€“ Psuedo code

DFS(startVertex):
   // Create a stack to hold vertices waiting to be explored
   Create a stack called stack
   
   // Add the starting vertex to the stack
   Push startVertex onto stack

   // Create a set to keep track of visited vertices
   Create an empty set called visitedSet
   
   // Continue exploring until all vertices are visited
   while (stack is not empty):
      // Take the next vertex from the stack
      currentVertex = Pop from stack

      // If the vertex has not been visited yet
      if (currentVertex is not in visitedSet):
         // "Visit" the current vertex (you can print its value or perform some operation)
         "Visit" currentVertex
         
         // Mark the current vertex as visited
         Add currentVertex to visitedSet

         // Explore the neighbors of the current vertex
         for each vertex adjVertex adjacent to currentVertex:
            // Push unvisited neighbor vertices onto the stack for future exploration
            if (adjVertex is not in visitedSet):
               Push adjVertex onto stack



Breadth First Search (BFS) Algorithm Psuedo code

BFS(startVertex):
   // Create a queue to hold vertices waiting to be explored
   Create a queue called frontierQueue

   // Add the starting vertex to the queue
   Enqueue startVertex into frontierQueue

   // Create a set to keep track of visited vertices
   Create an empty set called discoveredSet
   Add startVertex to discoveredSet

   // Continue exploring until all vertices are visited
   while (frontierQueue is not empty):
      // Take the next vertex from the queue
      currentVertex = Dequeue from frontierQueue

      // "Visit" the current vertex (you can print its value or perform some operation)
      "Visit" currentVertex

      // Explore the neighbors of the current vertex
      for each vertex adjVertex adjacent to currentVertex:
         // If the neighbor vertex has not been visited yet
         if (adjVertex is not in discoveredSet):
            // Add the neighbor vertex to the queue for future exploration
            Enqueue adjVertex into frontierQueue
            // Mark the neighbor vertex as visited
            Add adjVertex to discoveredSet

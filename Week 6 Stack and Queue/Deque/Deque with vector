#include <iostream>
#include <vector>


using namespace std;

class Deque {
private:
    vector<int> data;

public:
    Deque() {}

    void push_front(int val) {
        data.insert(data.begin(), val);
    }

    void push_back(int val) {
        data.push_back(val);
    }

    void pop_front() {
        if (empty()) {
            throw out_of_range("Deque is empty");
        }
        data.erase(data.begin());
    }

    void pop_back() {
        if (empty()) {
            throw out_of_range("Deque is empty");
        }
        data.pop_back();
    }

    int front() {
        if (empty()) {
            throw out_of_range("Deque is empty");
        }
        return data.front();
    }

    int back() {
        if (empty()) {
            throw out_of_range("Deque is empty");
        }
        return data.back();
    }

    bool empty() const {
        return data.empty();
    }

    size_t getSize() const {
        return data.size();
    }
};

int main() {
    Deque dq;

    // Push elements to the front
    dq.push_front(1);
    dq.push_front(2);
    dq.push_front(3);

    // Push elements to the back
    dq.push_back(4);
    dq.push_back(5);
    dq.push_back(6);

    // Output front and back elements
    cout << "Front element: " << dq.front() << endl;
    cout << "Back element: " << dq.back() << endl;

    // Pop elements from front and back
    dq.pop_front();
    dq.pop_back();

    // Output front and back elements after popping
    cout << "Front element after pop: " << dq.front() << endl;
    cout << "Back element after pop: " << dq.back() << endl;

    return 0;
}

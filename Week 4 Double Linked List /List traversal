#include <iostream>

using namespace std;

// Node class for the linked list
class Node {
public:
    int score;
    Node* next;

    // Constructor with list initialization
    Node(int value) : score(value), next(nullptr) {}
};

// Linked List class with head and tail pointers
class LinkedList {
private:
    Node* head;
    Node* tail;

public:
    // Constructor with list initialization
    LinkedList() : head(nullptr), tail(nullptr) {}

    // Function to insert a new node at the end
    void insert(int score) {
        Node* newNode = new Node(score);
        if (!head) {  // If list is empty, new node becomes head and tail
            head = tail = newNode;
        } else {  // Otherwise, add to the end and update tail
            tail->next = newNode;
            tail = newNode;
        }
    }

    // Function to traverse and print the original scores
    void printOriginalScores() const {
        cout << "Original Scores: ";
        Node* curNode = head;
        while (curNode) {
            cout << curNode->score << " ";
            curNode = curNode->next;
        }
        cout << endl;
    }

    // Function to add 5 extra credit points to each student's score
    void addExtraCredit() {
        Node* curNode = head;
        while (curNode) {
            curNode->score += 5;  // Add 5 points to each studentâ€™s score
            if (curNode->score > 100)  // Ensure max score does not exceed 100
                curNode->score = 100;   
            curNode = curNode->next;
        }
    }

    // Function to print the updated scores after extra credit
    void printUpdatedScores() const {
        cout << "Updated Scores (After Extra Credit): ";
        Node* curNode = head;
        while (curNode) {
            cout << curNode->score << " ";
            curNode = curNode->next;
        }
        cout << endl;
    }
};

// Main function
int main() {
    LinkedList studentScores;

    // Insert sample student scores (between 1-100)
    studentScores.insert(87);
    studentScores.insert(92);
    studentScores.insert(78);
    studentScores.insert(95);
    studentScores.insert(88);

    // Print original scores
    studentScores.printOriginalScores();

    // Apply extra credit
    studentScores.addExtraCredit();

    // Print updated scores
    studentScores.printUpdatedScores();

    return 0;
}

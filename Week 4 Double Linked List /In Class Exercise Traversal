#include <iostream>

using namespace std;

// Define the Node class for a Doubly Linked List
class Player {
public:
    string name;
    int score;
    Player* next;
    Player* prev;

    // TODO: Implement a constructor to initialize name, score, next, and prev
};

// Define the Doubly Linked List class
class Leaderboard {
private:
    Player* head;
    Player* tail;

public:
    // TODO: Implement a constructor that initializes head and tail to nullptr

    // TODO: Implement a function to insert a new player at the end of the list
    void insert(string name, int score) {
        // 1. Create a new Player node
        // 2. If the list is empty, set head and tail to the new node
        // 3. Otherwise, add the new node at the tail
    }

    // TODO: Implement a function to display the leaderboard in forward order
    void displayLeaderboardForward() const {
        // 1. Start from the head node
        // 2. Print each player's name and score
        // 3. Move to the next node
    }

    // TODO: Implement a function to display the leaderboard in reverse order
    void displayLeaderboardBackward() const {
        // 1. Start from the tail node
        // 2. Print each player's name and score
        // 3. Move to the previous node
    }
};

// Main function
int main() {
    Leaderboard gameLeaderboard;

    // Insert sample players into the leaderboard
    gameLeaderboard.insert("ZeldaMaster99", 1050);
    gameLeaderboard.insert("DragonSlayer77", 1200);
    gameLeaderboard.insert("MageOfTime", 980);
    gameLeaderboard.insert("RogueShadow", 1105);
    gameLeaderboard.insert("DungeonExplorer", 1025);

    // Display leaderboard (Forward)
    cout << "\n🏆 Adventure Game Leaderboard (Top to Bottom) 🏆\n";
    gameLeaderboard.displayLeaderboardForward();

    // Display leaderboard (Backward)
    cout << "\n🔄 Reverse Leaderboard (Bottom to Top) 🔄\n";
    gameLeaderboard.displayLeaderboardBackward();

    return 0;
}

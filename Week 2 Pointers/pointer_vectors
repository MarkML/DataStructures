// we can pass vectors as function arguments

#include <iostream>
#include <vector>
using namespace std;

// Step 1: Function that takes a pointer to a vector<int>
int SumOfElements(vector<int>* vecPtr) {
    int sum = 0;

    // Step 2: Check if the pointer is valid
    // If vecPtr is nullptr, dereferencing it would cause a crash.
    if (vecPtr == nullptr) {
        return -1;  // Return -1 to indicate an error
    }

    // Step 3: Iterate through the vector using pointer access
    // vecPtr->size() is equivalent to (*vecPtr).size()
    for (int i = 0; i < vecPtr->size(); i++) {
        sum += (*vecPtr)[i];  // Dereference pointer, then access element
    }

    // Step 4: Return the computed sum
    return sum;
}

int main() {
    // Step 5: Create a vector of integers
    vector<int> A = {1, 2, 3, 4, 5, 6, 7};

    // Step 6: Pass the address of vector A (&A) to the function
    // This allows the function to access the same vector without copying it
    int total = SumOfElements(&A);

    // Step 7: Print the result
    cout << total;

    return 0;
}

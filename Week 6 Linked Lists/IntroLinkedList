#include <iostream>

using namespace std;

class Node {
public:
    int data;
    Node* next;

    // Constructor
    Node(int value) {
        data = value;
        next = nullptr;
    }
};

class LinkedList {
private:
    Node* head;
    Node* tail;

public:
    // Constructor
    LinkedList() {
        head = nullptr;
        tail = nullptr;
    }

    // Insert a new node at the end of the list
    void ListAppend(int value) {
        Node* newNode = new Node(value);
        if (head == nullptr) { // Check if the list is empty
            head = newNode; // If empty, set both head and tail to the new node
            tail = newNode;
        } else {
            tail->next = newNode; // If not empty, append the new node after the current tail
            tail = newNode; // Update the tail pointer to the new node
        }
    }

    // Insert a new node at the beginning of the list
    void prepend(int value) {
        Node* newNode = new Node(value);
        newNode->next = head; // Point the new node to the current head
        head = newNode; // Update the head pointer to the new node
        if (tail == nullptr) { // Check if the list was empty before adding the new node
            tail = newNode; // If empty, set the tail pointer to the new node
        }
    }

    // Display all elements of the list
    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data;
            if (temp->next != nullptr) {
                cout << " -> ";
            }
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    LinkedList list;
    int choice, value;

    cout << "Linked List Operations:\n\n";

    do {
        cout << "1. Insert at End\n2. Prepend\n3. Display\n4. Exit\n\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to insert: ";
                cin >> value;
                list.ListAppend(value);
                cout << "Value " << value << " inserted at the end.\n";
                break;
            case 2:
                cout << "Enter value to prepend: ";
                cin >> value;
                list.prepend(value);
                cout << "Value " << value << " prepended to the list.\n";
                break;
            case 3:
                cout << "Linked List: ";
                list.display();
                break;
            case 4:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid choice. Please enter a number from 1 to 4.\n";
        }
    } while (choice != 4);

    return 0;
}
